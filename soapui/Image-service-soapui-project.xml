<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8714f3c3-98ee-405f-966f-e11540a49e91" activeEnvironment="Default" name="Image service" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="7fa815f3-a201-438b-841f-e5ba983450c7" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://localhost:8443" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>http://localhost:8089/</con:endpoint>
      <con:endpoint>https://localhost:8443</con:endpoint>
    </con:endpoints>
    <con:resource name="Fotostore" path="/fotostore/limitedAccess/image/{key}" id="4c1e167b-05a7-49c3-985f-e862876de939">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>key</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="Fotostore" id="f0196160-4052-49c9-ac42-3ffd319d2032" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html;charset=utf-8</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>image/png</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=iso-8859-1</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>image/jpeg</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Get image" id="199c57d6-1a4c-497e-b61f-e19530234383" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>https://localhost:8443</con:endpoint>
          <con:request/>
          <con:originalUri>https://localhost/fotostore/</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="key" value="..." xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>key</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="b942c842-1276-4643-a691-e830399e18ce" name="Get Image">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="138408e6-7dba-4fe8-9e3f-5cee8ce8fef0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Image" searchProperties="true">
      <con:settings/>
      <con:testStep type="restrequest" name="Get Image" id="4f0327d0-6c7a-45ec-8c49-d95aa39c1dc3">
        <con:settings/>
        <con:config service="https://localhost:8443" methodName="Fotostore" resourcePath="/fotostore/limitedAccess/image/{key}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Get Image" id="85067397-3e2f-48b2-9367-ca14537dd31e" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>https://localhost:8443/</con:endpoint>
            <con:request/>
            <con:originalUri>http://localhost/fotostore/limitedAccess/image/gxzM-6Nn2eC1cIFQ8mSMWw</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="key" value="2ldG1ZsakYLBSEt1M08SiA" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>key</con:name>
          <con:value>UNJ1DuCLlChi6-ZaB85s7g</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:restMockService id="dfa2399e-6346-477c-834d-6dabd1d846dc" port="8089" path="/imageService" host="ml" name="Image processor" docroot="">
    <con:settings/>
    <con:properties/>
    <con:onRequestScript/>
    <con:restMockAction name="/process" method="POST" resourcePath="/process" id="3a39bbf6-ef4d-4d25-8428-27410a50d748">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Success" id="9896ee67-db11-4af5-b39a-9caf185437e4" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:script>import groovy.json.JsonSlurper

// Take the URLs of the images from the request,
// download each of them,
// store them in a file.

def processRequest = new JsonSlurper().parseText(mockRequest.requestContent)

log.info "Request named `${processRequest.name}'"
log.info "-- Images:"

// get target testcase and teststep
def project = mockResponse.mockOperation.mockService.project
def getImageTestCase = project.testSuites["Get Image"].testCases["Get Image"]
def getImageTestStep = getImageTestCase.testSteps["Get Image"]

File outputDir = context.outputDir
if (!outputDir) {
	outputDir = File.createTempDir()
	context.outputDir = outputDir
}

processRequest.images.each { image ->
    log.info "       name ${image.name}, url ${image.url}"
    def matcher = image.url =~ /\/([-a-zA-Z0-9_]+)$/
    def key = matcher[0][1]
    log.info "       key " + key

    getImageTestStep.setPropertyValue( "key", key )

    // run testCase to download the image.
    def runner = getImageTestCase.run( new com.eviware.soapui.support.types.StringToObjectMap(), false )
    if (runner.status.toString() == "FINISHED") {
        requestContext.jobId += " Success"
        def outputFile = new File(outputDir, "image-${processRequest.name}-${image.name}-${key}.dat")
        log.info "       Storing in " + outputFile
        outputFile.bytes = getImageTestStep.testRequest.response.rawResponseData
    }
    else {
        requestContext.jobId += " Error: " + runner.reason
    }
}

requestContext.jobId = "${processRequest.name}-${new Date().getTime() % 100000}"
log.info "-- Created job " + requestContext.jobId</con:script>
        <con:responseContent>{"message":"Greetings from SoapUI", "id":"${jobId}"}</con:responseContent>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>